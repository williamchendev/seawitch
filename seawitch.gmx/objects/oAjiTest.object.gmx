<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAji_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.35;

//Movement Script
stopping = false;
jumping = false;
running = false;
gravitydelay = 0;
canmove = true;
vspd = 0;
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Settings
walkspeed = 1;
runspeed = 2;
frictionstrength = 0.05;
jumpstrength = 5;
gravitystrength = 1;
gravityskip = 2;

//Keys
WKey = keyboard_check(ord('W'));
AKey = -keyboard_check(ord('A'));
DKey = keyboard_check(ord('D'));
SKey = keyboard_check(ord('S'));
FKey = keyboard_check_pressed(ord('F'));
Shift = keyboard_check(vk_shift);
Escape = keyboard_check_pressed(vk_escape);
move = (AKey + DKey);

//Sprites
if (canmove){
    if (place_free(x, y + 2.01))
    {
        sprite_index = sAji_Jump;
        if (vspd &gt; 0){
            image_index = 2;
            jumping = true;
        }
        else if (vspd == 0){
            image_index = 1;
        }
        else if (vspd &lt; 0){
            image_index = 0;
        }
        image_speed = 0;
    }
    else if (stopping and hspd != 0){
        sprite_index = sAji_Stop;
        image_speed = 0.3;
    }
    else if (move == 0){
        if (!stopping and !running){
            sprite_index = sAji_Idle;
        }
        image_speed = 0.3;
    }
    else if (move != 0){
        if (running){
            sprite_index = sAji_Walk_Staff;
        }
        else {
            sprite_index = sAji_Walk;
        }
        image_speed = 0.3;
    }
}
else {
    if (sprite_index != sAji_Drink and sprite_index != sAji_Roll){
        image_speed = 0;
    }
}

//Movement
/** if (canmove){
    if (stopping){
        if (hspd != 0){
            hspd -= frictionstrength * sign(hspd);
        }
        else if (hspd == 0){
            stopping = false;
        }
    }
    if (!stopping){
        if (move != 0){
            if (Shift and !running){
                running = true;
            }
            if (running){
                hspd = move * runspeed;
                image_xscale = move;
            }
            else if (!running){
                hspd = move * walkspeed;
                image_xscale = move;
            }
        }
        else {
            if (running){
                running = false;
                stopping = true;
            }
            else {
                hspd = 0;
            }
        }   
    }
    
    //Jumping
    if (!place_free(x, y + 1)) {
        vspd += -jumpstrength * WKey;
        gravitydelay = 0;
        jumping = true;
    }
}
else {
    if (rolling != true){
        if (hspd != 0){
            hspd -= frictionstrength * sign(hspd);
        }
        else {
            stopping = false;
        }
    }
}
*/

//React to Inputs
//move = AKey + DKey;
hspd = move * walkspeed;
if (!place_free(x, y + 1)) {
    vspd += -jumpstrength * WKey;
    gravitydelay = 0;
    jumping = true;
}
//if (!place_free(x,y+1))
//{
    //vspd = WKey * -jumpstrength;
    //gravitydelay = 0;
//}

//Gravity
if (place_free(x,y + 1)) { 
    if (gravitydelay = 0){
        vspd += gravitystrength; 
        gravitydelay++;
    }
    else if (gravitydelay = gravityskip){
        gravitydelay = 0;
    }
    else{
        gravitydelay++;
        vpsd = 0; 
    }
}

//Horizontal Collision
if (!place_free(x + hspd, y)) {
    yplus = 0;
    while (!place_free(x + hspd, y - yplus) &amp;&amp; yplus &lt;= abs(hspd)){
        yplus += 1;
    }
    if (!place_free(x + hspd, y - yplus))
    {
        while (place_free(x + sign(hspd), y)){
            x += sign(hsp);
        }
        hspd = 0;
        move = 0;
        running = false;
    }
    else
    {
        y -= yplus;
    }
}

x += hspd;

//Verticle Collisions
if (!place_free(x, y + vspd)) {
    while(place_free(x, y + sign(vspd))){
        y += sign(vspd);
    }
    if (!place_free(x, y + 1)){
        jumping = false;
    }
    vspd = 0;
}

y += vspd;

//View
if ((x - (view_wview / 2)) &lt;= 0){
    view_xview[0] = 0;
}
else if ((x + (view_wview / 2)) &gt;= room_width){
    view_xview[0] = room_width - view_wview;
}
else{
    view_xview[0] = round(x) - (view_wview / 2);
}

//Movement Script
//stopping = false;
//stopdirection = 0;
//jumping = false;
//running = false;
//gravitydelay = 0;
//canmove = true;
//vspd = 0;
//hspd = 0;

if (Escape){
    if (instance_exists(oExit) != true){
        instance_create(0, 0, oExit);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
